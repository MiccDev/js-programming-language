statements      : NEWLINE* expr (NEWLINE+ expr)* NEWLINE*

expr            : KEYWORD:PUSH IDENTIFIER ARROW expr
                : comp-expr ((KEYWORD:&|KEYWORD:or) comp-expr)* 

comp-expr       : : comp-expr
                : arith-expr ((EE|LT|GT|LTE|GTE) arith-expr)*

arith-expr      : term ((PLUS|MINUS) term)*

term            : factor ((MUL|DIV) factor)*

factor          : (PLUS|MINUS) factor

power           : call (POW factor)*

call            : atom (LPAREN (expr (COMMA expr)*)? RPAREN)?

atom            : INT|FLOAT|IDENTIFIER|STRING
                : LPAREN expr RPAREN
                : if-expr
                : for-expr
                : while-expr
                : func-def
                : list-expr

if-expr         : KEYWORD:if expr KEYWORD:do
                  (expr if-expr-b|if-expr-c?)
                | (NEWLINE statements KEYWORD:fin|if-expr-b|if-expr-c)

if-expr-b       : KEYWORD:elif expr KEYWORD:do
                  (expr if-expr-b|if-expr-c?)
                | (NEWLINE statements KEYWORD:fin|if-expr-b|if-expr-c)

if-expr-c       : KEYWORD:else
                  expr
                | (NEWLINE statements KEYWORD:fin|if-expr-b|if-expr-c)

list-expr       : LSQUARE (expr (COMMA expr)*)? RSQUARE

for-expr        : KEYWORD:for IDENTIFIER ARROW expr KEYWORD:until expr
                  (KEYWORD:inc expr)? KEYWORD:do
                  expr
                | (NEWLINE statements KEYWORD:fin)

while-expr      : KEYWORD:while expr KEYWORD:do
                  expr
                | (NEWLINE statements KEYWORD:fin)

func-def        : KEYWORD:define IDENTIFIER?
                  LPAREN (IDENTIFIER (COMMA IDENTIFIER)*)? RPAREN
                  (ARROW expr)
                | (NEWLINE statements KEYWORD:fin)
                